#!/usr/bin/perl

use warnings;
use strict;
use utf8;

use AnyEvent;
use AnyEvent::Impl::Perl;
use AnyEvent::XMPP::Client;
use AnyEvent::HTTPD;
use AnyEvent::HTTP qw(http_request);
use AnyEvent::TLS;

use Data::Dumper;
use Data::Uniqid qw(uniqid);
use Getopt::Std;
use POSIX;
use JSON;
use Carp;
use XML::Simple;


my $httpd;
my $j = AnyEvent->condvar;
my $cl = AnyEvent::XMPP::Client->new(debug => 0);
my $config;
my $subscribers;
my $reply_url;
my $cli_options = {};

sub print_log
{
	return print(strftime('[%F %T] ', localtime()), @_);
}

sub daemonize                                                                       
{                                                                                   
	my ($log_filename, $pidfile) = @_;                                              
	chdir '/';                                                                      
	umask 0;                                                                        
	open(STDIN, '<', '/dev/null')   or croak("Cannot read /dev/null: $!");          
	if(defined $log_filename and $log_filename ne '-') {
		open(STDOUT, '>>', $log_filename) or croak("Cannot write to $log_filename: $!");
		open(STDERR, '>>', $log_filename) or croak("Cannot write to $log_filename: $!");
	}
	defined(my $pid = fork()) or croak("Cannot fork: $!");                          
	exit if $pid;                                                                   
	open( my $PIDFILE, '>', $pidfile) or croak("Cannot open pidfile $pidfile!\n");  
	print $PIDFILE $$ . "\n";                                              
	close($PIDFILE);                                                                
	setsid or croak "Can't start a new session: $!";                                
	$0 = 'github-notifier';                                                            
	print_log "Github notifier daemon successfully started with PID $$\n";    
	return 1;                                                                       
}                                                                                   

sub getDisplayName 
{
	my ($committer) = @_;
	return $committer->{'name'}	. ' <' . $committer->{'email'} . '>';
}

sub truncateSHA
{
	my ($sha, $length) = @_;
	$length = 10 if not defined $length;
	return substr($sha, 0, $length);
}

sub getBranchName 
{
	my $ref = shift;

	$ref =~ /.*\/(.*)/;
	return $1
}

sub parsePayload
{
	my ($payload) = @_;
	my $message;
	my %actions = (
		'opened' => 'cоздал',
		'closed' => 'закрыл',
		'synchronize' => 'подтянул',
	);

	#обрабатываем следующие сообщения:
	#пулл-реквест (создание, закрытие)
	#новый комментарий 
	#новая issue(?)
	#коммит 
	if(defined ($payload->{'comment'})) {
		print_log("Comment action\n");
		my $user = $payload->{'sender'}->{'login'};
		my $comment = $payload->{'comment'}->{'body'};
		if(defined ($payload->{'issue'})) {
			#комментарий к тикету/пулл-реквесту
			my $issue = $payload->{'issue'}->{'title'};
			my $issue_number = $payload->{'issue'}->{'number'};
			my $issue_url = $payload->{'issue'}->{'html_url'};
			$message = "Пользователь $user прокомментировал задачу #$issue_number \"$issue\" ($issue_url):\n$comment";
			$reply_url = $payload->{'repository'}->{'url'} . '/issues/' . $issue_number . '/comments';
		} elsif (defined ($payload->{'comment'}->{'commit_id'}) ) {
			#комментарий к коммиту
			my $commit_id = truncateSHA($payload->{'comment'}->{'commit_id'});
			my $commit_url = $payload->{'comment'}->{'html_url'}; 
			$reply_url = $payload->{'repository'}->{'url'} . '/commits/' . $payload->{'comment'}->{'commit_id'} . '/comments';
			$message = "Пользователь $user прокомментировал коммит $commit_id ($commit_url):\n$comment";
		}
	} elsif(defined ($payload->{'pull_request'})) {
		print_log("Pull-request action\n");
		my $pull_request = $payload->{'pull_request'}; 

		my $action = $actions{$payload->{'action'}};
		$action = $payload->{'action'} if not defined $action;

		my $user = $payload->{'sender'}->{'login'};
		my $url = $pull_request->{'html_url'};
		my $diff = $pull_request->{'diff_url'};
		my $body = $pull_request->{'body'};
		my $title = $pull_request->{'title'};
		my $base = $pull_request->{'base'}->{'repo'}->{'full_name'} . ':' . $pull_request->{'base'}->{'ref'};
		my $head = $pull_request->{'head'}->{'repo'}->{'full_name'} . ':' . $pull_request->{'head'}->{'ref'};

		$message = "Пользователь $user $action пулл-реквест ($url) из $head в $base:\n$title: $body\n\nСписок изменений: $diff";
		undef $reply_url;

	} elsif (defined ($payload->{'commits'}) and ref($payload->{'commits'}) eq 'ARRAY') {
		print_log("Commit action\n");
		my $user = $payload->{'pusher'}->{'name'};
		my $branch = getBranchName($payload->{'ref'});
		my $repo = $payload->{'repository'}->{'url'};
		my $repo_name = $payload->{'repository'}->{'name'};
		my $current_state =  truncateSHA($payload->{'head_commit'}->{'id'}, 12);
		my $prev_state = truncateSHA($payload->{'before'}, 12);

		if(scalar(@{$payload->{'commits'}}) > 0) {
			my @push_commits;
			foreach my $commit (@{ $payload->{'commits'} }) {
				push(@push_commits, getDisplayName($commit->{'committer'}) . "\n" . truncateSHA($commit->{'id'}) . ": "	. $commit->{'message'})
			}
			$message = "В репозиторий $repo в ветку $branch пользователем $user были отправлены следующие коммиты:\n" .
			join("\n-----\n", @push_commits) . "\n========\nИзменения: $repo/compare/$prev_state...$current_state";
			

		} elsif($payload->{'after'} =~ /^0*$/ ) {
			$message = "Пользователь $user удалил ветку $branch из репозитория $repo";
		}
		print_log("Running repo update script...\n");
		system("/bin/sh -c '/home/vcs/scripts/update_repo.sh $repo_name &'");
		undef $reply_url;
	}

	print_log("message is $message\n");
	return $message;
}


sub processRequest 
{
	my ($httpd, $req) = @_;

	print_log('Request from ' . $req->client_host . ':' . $req->client_port . ": " . $req->method . " " . $req->url->path . "\n");
	$req->respond([200, 'OK']);

	if(defined $req->parm("payload")) {
		my $payload = from_json($req->parm("payload"), {utf8 => 1});

		my $message = parsePayload($payload);
		foreach my $jid (keys %{$subscribers}) {
			print_log("Sending message to $jid\n");
			$cl->send_message($message => $jid, undef, 'chat');
		}
	}

	$httpd->stop_request();
}




sub readConfig {

	my $opts = shift;

	my $config_filename = 'ghn-config.xml';
	my $cfg;

	$config_filename = $opts->{'c'} if defined ($opts->{'c'});

	print_log("Loading config from $config_filename\n");

	$cfg = XMLin($config_filename) or croak("Cannot open config $config_filename!");

	if((not defined $cfg->{'config'}->{'xmpp'}->{'login'}) or (not defined $cfg->{'config'}->{'xmpp'}->{'password'})) {
		croak("You must specify XMPP connection credentials in $config_filename!");
	}

	#override config settings by command-line parameters
	$cfg->{'config'}->{'daemon'}->{'pid_file'} =  $opts->{'i'} if (defined $opts->{'i'});
	$cfg->{'config'}->{'daemon'}->{'log_file'} = $opts->{'l'} if (defined $opts->{'l'});
	$cfg->{'config'}->{'daemon'}->{'daemonize'} = 1 if (defined $opts->{'d'});
	$cfg->{'config'}->{'daemon'}->{'port'} = $opts->{'p'} if (defined $opts->{'p'});


	#load default values for unspecified settings
	if(not defined $cfg->{'config'}->{'daemon'}->{'port'}) {
		$cfg->{'config'}->{'daemon'}->{'port'} = 9090;
	}
	if(not defined $cfg->{'config'}->{'daemon'}->{'daemonize'}) {
		$cfg->{'config'}->{'daemon'}->{'daemonize'} = 0;
	}
	if(not defined $cfg->{'config'}->{'daemon'}->{'pid_file'}) {
		$cfg->{'config'}->{'daemon'}->{'pid_file'} = '/tmp/github-notifier.pid';
	}
	if(not defined $cfg->{'config'}->{'daemon'}->{'log_file'}) {
		$cfg->{'config'}->{'daemon'}->{'log_file'} = '/tmp/github-notifier.lod';
	}

	return $cfg;
}

sub handleXMPPMessage {
	my ($cl, $acc, $msg) = @_;
	print "message from: " . $msg->from . ": " . $msg->any_body . "\n";
	my ($jid, $resource) = split(/\//, $msg->from);

	if(defined $reply_url and defined $subscribers->{$jid}->{'token'} ) {
		print_log("Posting comment from $jid... ");
		http_request(
			POST => $reply_url, 
			headers => {
				Authorization => 'token ' . $subscribers->{$jid}->{'token'}
			}, 
			body => to_json( { body => $msg->any_body }, { utf8 => 1} ),
			sub {
				my ($body, $headers) = @_;
				print "done! Status: " . $headers->{'status'} . "\n";
			}
		);
	} else {
		my $error = "Для вашей учётной запиcи не создан токен авторизации на Github";
		$error = "Ваши комментарии здесь неуместны" if not defined $reply_url;

		$cl->send_message($error => $msg->from, undef, 'chat');
	}

}


sub sighupHandler {
	print_log("Catch SIGHUP, reload config.\n");
	my $c = readConfig($cli_options);
	#ignore config section, update only subscribers info
	$subscribers = $c->{'subscribers'};
	print_log("Daemon parameters ignored, loaded new subscribers: " . join(", ", keys(%{$subscribers})) . "\n");
}

##################



getopts("c:p:l:i:d", $cli_options);

my $sigset = POSIX::SigSet->new();
$sigset->addset(&POSIX::SIGHUP);

my $action = POSIX::SigAction->new("sighupHandler", $sigset, &POSIX::SA_NODEFER);
POSIX::sigaction(&POSIX::SIGHUP, $action);


my $whole_config = readConfig($cli_options);
$config = $whole_config->{'config'};
$subscribers = $whole_config->{'subscribers'};

daemonize($config->{'daemon'}->{'log_file'}, $config->{'daemon'}->{'pid_file'}) if $config->{'daemon'}->{'daemonize'}; 

$httpd = AnyEvent::HTTPD->new (port => $config->{'daemon'}->{'port'});
$httpd->reg_cb (request => \&processRequest);

$cl->add_account ($config->{'xmpp'}->{'login'}, $config->{'xmpp'}->{'password'}, 
	undef, undef, { 
		resource => $config->{'daemon'}->{'port'} . '-' . uniqid(), 
		disable_ssl => "false" 
	}
);

$cl->reg_cb (
	session_ready => sub {
		my ($cl, $acc) = @_;
		$cl->send_message (
			"Github-уведомлятор запустился" => 'migalin@welltime.ru', undef, 'chat'
		);
	},
	disconnect => sub {
		my ($cl, $acc, $h, $p, $reas) = @_;
		print "disconnect ($h:$p): $reas\n";
		$j->broadcast;
	},
	contact_request_subscribe => sub {
		my ($acc, $conn, $roster, $contact, $message) = @_;
		$contact->send_subscribed();
	}, 

	error => sub {
		my ($cl, $acc, $err) = @_;
		print "ERROR: " . $err->string . "\n";
	},
	message => \&handleXMPPMessage,
);

$cl->start;
$cl->set_presence("available", "Нормально делай - нормально будет!", 0);

print_log("Daemon started with pid $$, now waiting for events\n");
AnyEvent::Impl::Perl::loop();
